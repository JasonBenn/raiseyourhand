== Raise Your Hand

User generated classrooms. Easy video lesson curation.

http://raiseyourhand.herokuapp.com/

Created by:
* Aaron DuFall (git: aarondufall, aald212@gmail.com)
* Jordan Nemrow (git: nemrow, nemrowj@gmail.com)
* Lukas Ingelheim (git: Ingelheim, lukas.ingelheim@gmail.com)

== About

A final group project for Dev Bootcamp (Chicago, IL).

During our preparation for and throughout DBC, we found ourselves consistently referring to many different types of educational sites.  We'd go to Stack Overflow to have our questions answered in depth, and then we'd turn to sites like Lynda or Udacity to learn new content (and be subsequently quizzed on that content, to aid retention).  What we wanted to build was a site that combined these advantages into one platform.

Raise Your Hand allows users to create and rearrange video-based educational content; it is automatically linked to a live, dynamic question feed.  This makes it possible to ask a question or create a review question at any point during a video lesson.  Review questions are presented to the user at periodic intervals during the lesson, and question and answer content is displayed in a feed to the right of the video at the time it was asked.  Highly upvoted content rises to the top of the Recommended Lessons on the front page, and additionally we built a custom fuzzy search engine that searches across multiple words in fractions of a second.

== Testing

This was, as a team, one of our first serious dives into testing (and at times, TDD).  The majority of our tests were integration tests on controllers to ensure our APIs would respond accordingly to correct and incorrect AJAX payloads.  Note: we (mistakenly) tested a bit of Rails glue code, such as associations and attribute mass-assignability.  It was helpful for spotting code typos but we now know that such tests aren't necessary.

In the process, we learned the value of testing in resolving bugs quickly, especially ones that aren't immediately obvious, making sure the additions of new code don't break existing and working features.

== Final Thoughts

Thanks to Dev Bootcamp for providing the support and strucutre to make this project better.  

We combine the best elements of Stack Overflow and modern Massive Open Online Courses such as Udacity.com or Lynda.

database-backed web applications according to the Model-View-Control pattern.

1. At the command prompt, create a new Rails application:
       <tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)

  class WeblogController < ActionController::Base
  end

  >> @posts.inspect
  => "[#<Post:0x14a6be8
          @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>,
       #<Post:0x14a6620
          @attributes={"title"=>"Rails", "body"=>"Only ten..", "id"=>"2"}>]"
  >> @posts.first.title = "hello from a debugger"
  => "hello from a debugger"

...and even better, you can examine how your runtime objects actually work:

  >> f = @posts.first
  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
  >> f.
  Display all 152 possibilities? (y or n)


The default directory structure of a generated Ruby on Rails application:

  |-- app
  |   |-- assets
  |   |   |-- images
  |   |   |-- javascripts
  |   |   `-- stylesheets
  |   |-- controllers
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- layouts
  `-- vendor
      |-- assets
      |   |-- javascripts
      |   `-- stylesheets
      `-- plugins

app
  Holds all the code that's specific to this particular application.

db
  Contains the database schema in schema.rb. db/migrate contains all the
  sequence of Migrations for your schema.
